import React, { useState, useRef, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  TextField,
  Button,
  Avatar,
  Chip,
  CircularProgress,
  Stack,
  Card,
  CardContent,
} from '@mui/material';
import {
  Send as SendIcon,
  SmartToy as AIIcon,
  Person as PersonIcon,
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  text: string;
  timestamp: Date;
  suggestions?: string[];
}

const AIAssistantPage: React.FC = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage: Message = {
      id: 'welcome',
      type: 'assistant',
      text: `–ü—Ä–∏–≤–µ—Ç, ${user?.username}! –Ø –í–æ–ª–≥–∞, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –°–∞—Ä–∞—Ç–æ–≤—É! üèõÔ∏è\n\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º:\n‚Ä¢ –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞\n‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\n‚Ä¢ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É\n‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö\n\n–û —á–µ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`,
      timestamp: new Date(),
      suggestions: [
        '–ì–¥–µ –ø–æ–µ—Å—Ç—å –≤ –°–∞—Ä–∞—Ç–æ–≤–µ?',
        '–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥–æ—Ä–æ–¥–µ?',
        '–°–æ—Å—Ç–∞–≤—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å',
        '–ü–æ—Å–æ–≤–µ—Ç—É–π –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –º–µ—Å—Ç–∞',
      ],
    };
    setMessages([welcomeMessage]);
  }, [user?.username]);

  const sendMessage = async (messageText: string) => {
    console.log('sendMessage –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º:', JSON.stringify(messageText));

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      text: messageText,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setLoading(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É AI API
      const token = localStorage.getItem('token');
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageText);
      console.log('–¢–æ–∫–µ–Ω:', token ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      const response = await fetch('http://localhost:5000/api/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: messageText }),
      });

      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        text: data.response,
        timestamp: new Date(),
        suggestions: data.suggestions,
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const aiResponse = generateAIResponse(messageText);
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        text: aiResponse.text,
        timestamp: new Date(),
        suggestions: aiResponse.suggestions,
      };

      setMessages(prev => [...prev, assistantMessage]);
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = async () => {
    console.log('handleSendMessage –≤—ã–∑–≤–∞–Ω, inputValue:', JSON.stringify(inputValue));
    
    if (!inputValue.trim()) {
      console.log('inputValue –ø—É—Å—Ç–æ–π, –≤—ã—Ö–æ–¥–∏–º');
      return;
    }

    const messageText = inputValue.trim();
    setInputValue('');
    await sendMessage(messageText);
  };

  const handleSuggestionClick = async (suggestion: string) => {
    console.log('–ö–ª–∏–∫ –ø–æ suggestion:', suggestion);
    await sendMessage(suggestion);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const generateAIResponse = (userInput: string): { text: string; suggestions: string[] } => {
    const input = userInput.toLowerCase();

    if (input.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || input.includes('–ø–æ–µ—Å—Ç—å') || input.includes('–µ–¥–∞')) {
      return {
        text: '–í –°–∞—Ä–∞—Ç–æ–≤–µ –º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤! üçΩÔ∏è\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—é:\n‚Ä¢ "–í–æ–ª–∂—Å–∫–∏–π –±–µ—Ä–µ–≥" - –º–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –≤–∏–¥–æ–º –Ω–∞ –í–æ–ª–≥—É\n‚Ä¢ "–ì–∞—Å—Ç—Ä–æ–Ω–æ–º" - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—É—Ö–Ω—è\n‚Ä¢ "–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è —Ä—ã–±–∞–ª–∫–∞" - –ª—É—á—à–∞—è –≤–æ–ª–∂—Å–∫–∞—è —Å—Ç–µ—Ä–ª—è–¥—å\n\n–ö–∞–∫—É—é –∫—É—Ö–Ω—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏ –∫–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?',
        suggestions: ['–ù–µ–¥–æ—Ä–æ–≥–∏–µ –∫–∞—Ñ–µ', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –≤–∏–¥–æ–º', '–ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è', '–ë—ã—Å—Ç—Ä–∞—è –µ–¥–∞'],
      };
    }

    if (input.includes('–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç') || input.includes('–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å') || input.includes('–º—É–∑–µ–π')) {
      return {
        text: '–í –°–∞—Ä–∞—Ç–æ–≤–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç! üèõÔ∏è\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç–µ:\n‚Ä¢ –ü–∞—Ä–∫ –õ–∏–ø–∫–∏ - —Å—Ç–∞—Ä–µ–π—à–∏–π –ø–∞—Ä–∫ –≥–æ—Ä–æ–¥–∞\n‚Ä¢ –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è –∏–º. –°–æ–±–∏–Ω–æ–≤–∞\n‚Ä¢ –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ —Å –≤–∏–¥–æ–º –Ω–∞ –í–æ–ª–≥—É\n‚Ä¢ –†–∞–¥–∏—â–µ–≤—Å–∫–∏–π –º—É–∑–µ–π\n‚Ä¢ –°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–∞ –°–æ–∫–æ–ª–æ–≤–æ–π –≥–æ—Ä–µ\n\n–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç - –∏—Å—Ç–æ—Ä–∏—è, –∫—É–ª—å—Ç—É—Ä–∞ –∏–ª–∏ –ø—Ä–∏—Ä–æ–¥–∞?',
        suggestions: ['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞', '–ú—É–∑–µ–∏ –≥–æ—Ä–æ–¥–∞', '–ü–∞—Ä–∫–∏ –∏ –ø—Ä–∏—Ä–æ–¥–∞', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'],
      };
    }

    if (input.includes('–º–∞—Ä—à—Ä—É—Ç') || input.includes('–ø–ª–∞–Ω')) {
      return {
        text: '–û—Ç–ª–∏—á–Ω–æ! –°–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å –º–∞—Ä—à—Ä—É—Ç –ø–æ –°–∞—Ä–∞—Ç–æ–≤—É üó∫Ô∏è\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É?\n‚Ä¢ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–µ—à–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º?\n‚Ä¢ –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è —Å–æ—Å—Ç–∞–≤–ª—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç!',
        suggestions: ['–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –ø–æ–ª–¥–Ω—è', '–ö—É–ª—å—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞'],
      };
    }

    if (input.includes('–¥–µ—à–µ–≤–æ') || input.includes('–±—é–¥–∂–µ—Ç') || input.includes('–Ω–µ–¥–æ—Ä–æ–≥')) {
      return {
        text: '–ü–æ–Ω–∏–º–∞—é! –í –°–∞—Ä–∞—Ç–æ–≤–µ –º–æ–∂–Ω–æ –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ª—é–±—ã–º –±—é–¥–∂–µ—Ç–æ–º üí∞\n\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:\n‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≥–æ—Ä–æ–¥–∞\n‚Ä¢ –ü–∞—Ä–∫ –õ–∏–ø–∫–∏\n‚Ä¢ –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤\n‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏\n\n–î–µ—à–µ–≤–æ (–¥–æ 500‚ÇΩ):\n‚Ä¢ –ö–∞—Ñ–µ "–ë–ª–∏–Ω–Ω–∞—è"\n‚Ä¢ –ú—É–∑–µ–∏ —Å–æ –ª—å–≥–æ—Ç–∞–º–∏\n‚Ä¢ –†–µ—á–Ω–æ–π —Ç—Ä–∞–º–≤–∞–π\n\n–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –¥–µ–Ω—å?',
        suggestions: ['–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞', '–î–æ 1000 —Ä—É–±–ª–µ–π', '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –ª—å–≥–æ—Ç—ã', '–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç'],
      };
    }

    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return {
      text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î\n\n–°–∞—Ä–∞—Ç–æ–≤ - —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π. –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ –¥—É—à–µ: –æ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.\n\n–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:\n‚Ä¢ –õ—É—á—à–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è\n‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –∏ –∫–∞—Ñ–µ\n‚Ä¢ –ö—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n\n–û —á–µ–º –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
      suggestions: ['–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è', '–ú–∞—Ä—à—Ä—É—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è'],
    };
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –í–æ–ª–≥–∞
        </Typography>
        <Typography variant="body1" color="text.secondary" paragraph>
          –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –°–∞—Ä–∞—Ç–æ–≤–∞
        </Typography>

        <Stack direction={{ xs: 'column', md: 'row' }} spacing={3}>
          {/* –ß–∞—Ç */}
          <Box sx={{ flex: 2 }}>
            <Paper sx={{ height: 600, display: 'flex', flexDirection: 'column' }}>
              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <Box sx={{ flexGrow: 1, overflow: 'auto', p: 2 }}>
                {messages.map((message) => (
                  <Box key={message.id} sx={{ mb: 2 }}>
                    <Box
                      sx={{
                        display: 'flex',
                        justifyContent: message.type === 'user' ? 'flex-end' : 'flex-start',
                        mb: 1,
                      }}
                    >
                      <Box
                        sx={{
                          display: 'flex',
                          alignItems: 'flex-start',
                          maxWidth: '80%',
                          flexDirection: message.type === 'user' ? 'row-reverse' : 'row',
                        }}
                      >
                        <Avatar
                          sx={{
                            width: 32,
                            height: 32,
                            mx: 1,
                            bgcolor: message.type === 'user' ? 'primary.main' : 'secondary.main',
                          }}
                        >
                          {message.type === 'user' ? <PersonIcon /> : <AIIcon />}
                        </Avatar>
                        <Paper
                          className={message.type === 'user' ? 'user-message-light-blue' : ''}
                          sx={{
                            p: 2,
                            bgcolor: message.type === 'user' ? undefined : '#ffffff', // –±–µ–ª—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è AI
                            color: message.type === 'user' ? undefined : '#000000', // —Ü–≤–µ—Ç –¥–ª—è AI, –¥–ª—è user –±–µ—Ä–µ—Ç—Å—è –∏–∑ CSS –∫–ª–∞—Å—Å–∞
                            border: message.type === 'user' ? undefined : '1px solid #e0e0e0', // —Ä–∞–º–∫–∞ –¥–ª—è AI, –¥–ª—è user –∏–∑ CSS –∫–ª–∞—Å—Å–∞
                          }}
                        >
                          <Typography variant="body1" sx={{ whiteSpace: 'pre-line' }}>
                            {message.text}
                          </Typography>
                          <Typography 
                            variant="caption" 
                            sx={{ 
                              mt: 1, 
                              display: 'block',
                              color: '#666666' // –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
                            }}
                          >
                            {message.timestamp.toLocaleTimeString('ru-RU', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </Typography>
                        </Paper>
                      </Box>
                    </Box>
                    
                    {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è */}
                    {message.suggestions && (
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>
                        {message.suggestions.map((suggestion, index) => (
                          <Chip
                            key={index}
                            label={suggestion}
                            variant="outlined"
                            size="small"
                            onClick={() => handleSuggestionClick(suggestion)}
                            sx={{ cursor: 'pointer' }}
                          />
                        ))}
                      </Box>
                    )}
                  </Box>
                ))}
                
                {loading && (
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Avatar sx={{ width: 32, height: 32, mr: 1, bgcolor: 'secondary.main' }}>
                      <AIIcon />
                    </Avatar>
                    <Paper sx={{ p: 2, bgcolor: '#ffffff', color: '#000000', border: '1px solid #e0e0e0' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <CircularProgress size={16} sx={{ mr: 1 }} />
                        <Typography variant="body2">–í–æ–ª–≥–∞ –¥—É–º–∞–µ—Ç...</Typography>
                      </Box>
                    </Paper>
                  </Box>
                )}
                
                <div ref={messagesEndRef} />
              </Box>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <Box sx={{ p: 2, borderTop: '1px solid', borderColor: 'divider' }}>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  <TextField
                    fullWidth
                    multiline
                    maxRows={3}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    disabled={loading}
                  />
                  <Button
                    variant="contained"
                    onClick={handleSendMessage}
                    disabled={!inputValue.trim() || loading}
                    sx={{ minWidth: 48 }}
                  >
                    <SendIcon />
                  </Button>
                </Box>
              </Box>
            </Paper>
          </Box>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
          <Box sx={{ flex: 1 }}>
            <Card sx={{ mb: 2 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –û –í–æ–ª–≥–µ
                </Typography>
                <Typography variant="body2" paragraph>
                  –í–æ–ª–≥–∞ - —ç—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –≤—Å–µ –æ –°–∞—Ä–∞—Ç–æ–≤–µ. 
                  –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞—Å—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.
                </Typography>
                <Typography variant="body2">
                  <strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong><br />
                  ‚Ä¢ –ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º<br />
                  ‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤<br />
                  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É<br />
                  ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö<br />
                  ‚Ä¢ –°–æ–≤–µ—Ç—ã –º–µ—Å—Ç–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è
                </Typography>
              </CardContent>
            </Card>

            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {[
                    '–ì–¥–µ –ø–æ–µ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ?',
                    '–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ –¥–µ–Ω—å?',
                    '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –≤–µ—á–µ—Ä–æ–º?',
                    '–ú–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏',
                    '–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –≤ –≥–æ—Ä–æ–¥–µ',
                  ].map((question, index) => (
                    <Chip
                      key={index}
                      label={question}
                      variant="outlined"
                      onClick={() => handleSuggestionClick(question)}
                      sx={{ cursor: 'pointer', justifyContent: 'flex-start' }}
                    />
                  ))}
                </Box>
              </CardContent>
            </Card>
          </Box>
        </Stack>
      </Box>
    </Container>
  );
};

export default AIAssistantPage;
